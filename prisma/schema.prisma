// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AddressType {
  SHIPPING
  BILLING
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String            @unique
  password          String?
  role              Role              @default(USER)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  emailVerified     DateTime?
  verificationToken String?           @unique
  image             String?
  isGuest           Boolean           @default(false)
  accounts          Account[]
  sessions          Session[]
  orders            Order[]
  cart              Cart?
  reviews           Review[]
  reviewHelpfuls    ReviewHelpful[]
  wishlistItems     WishlistItem[]
  addresses         UserAddress[]
  auditLogs         AuditLog[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  price       Decimal          @db.Decimal(10, 2)
  categoryId  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  sku         String?          @unique
  stock       Int              @default(0)
  weight      Decimal?         @db.Decimal(10, 2)
  images      String[]
  featured    Boolean          @default(false)
  isActive    Boolean          @default(true)
  cost        Decimal?         @db.Decimal(10, 2)
  salePrice   Decimal?         @db.Decimal(10, 2)
  category    Category?        @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]
  fromRelations ProductRelation[] @relation("FromProduct")
  toRelations   ProductRelation[] @relation("ToProduct")
}

model ProductVariant {
  id        String     @id @default(cuid())
  productId String
  sku       String?    @unique
  name      String
  type      String
  price     Decimal?   @db.Decimal(10, 2)
  stock     Int        @default(0)
  image     String?
  specs     Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems CartItem[]
}

model Review {
  id          String         @id @default(cuid())
  productId   String
  userId      String
  rating      Int
  title       String         @db.VarChar(255)
  content     String
  images      String[]
  isVerified  Boolean        @default(false)
  helpful     Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  product     Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  helpfuls    ReviewHelpful[]
}

model ReviewHelpful {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductRelation {
  id            String   @id @default(cuid())
  fromProductId String
  toProductId   String
  type          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  fromProduct   Product  @relation("FromProduct", fields: [fromProductId], references: [id], onDelete: Cascade)
  toProduct     Product  @relation("ToProduct", fields: [toProductId], references: [id], onDelete: Cascade)

  @@unique([fromProductId, toProductId])
}

model Order {
  id              String          @id @default(cuid())
  userId          String?
  status          OrderStatus     @default(PENDING)
  total           Decimal         @db.Decimal(10, 2)
  tax             Decimal?        @db.Decimal(10, 2)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  orderNumber     String          @unique
  customerEmail   String?
  stripeSessionId String?         @unique
  shippingRate    Decimal?        @db.Decimal(10, 2)
  paymentIntentId String?         @unique
  user            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  items           OrderItem[]
  shippingAddress Address?
  billingAddress  BillingAddress?
}

model OrderItem {
  id        String        @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal       @db.Decimal(10, 2)
  variantId String?
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
}

model Address {
  id         String   @id @default(cuid())
  orderId    String   @unique
  city       String
  state      String
  country    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  postalCode String
  street     String
  name       String
  email      String
  phone      String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model BillingAddress {
  id         String   @id @default(cuid())
  name       String
  email      String
  city       String
  state      String
  country    String
  phone      String
  orderId    String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  postalCode String
  street     String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String        @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  variantId String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  cart      Cart          @relation(fields: [cartId], references: [id])
  product   Product       @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([cartId, productId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model UserAddress {
  id         String      @id @default(cuid())
  userId     String
  label      String?
  type       AddressType @default(SHIPPING)
  name       String
  email      String
  phone      String?
  city       String
  state      String
  country    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  postalCode String
  street     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  userId    String
  details   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model WebhookEvent {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
