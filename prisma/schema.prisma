// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  password          String?
  emailVerified     DateTime?
  verificationToken String?   @unique
  role              Role      @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  orders            Order[]
  accounts          Account[]
  sessions          Session[]
  reviews           Review[]
  helpfulReviews    ReviewHelpful[]
  carts             Cart[]
  wishlistItems     WishlistItem[]
  image             String?
  isGuest           Boolean   @default(false)

  @@index([email])
  @@index([role])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

model Product {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  price       Decimal   @db.Decimal(10, 2)
  stock       Int       @default(0)
  images      String[]
  weight      Decimal?  @db.Decimal(10, 2)
  sku         String?   @unique
  featured    Boolean   @default(false)
  isActive    Boolean   @default(true)
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
  variants    ProductVariant[]
  reviews     Review[]
  relatedFrom ProductRelation[] @relation("RelatedFrom")
  relatedTo   ProductRelation[] @relation("RelatedTo")
  wishlistItems WishlistItem[]

  @@index([categoryId])
  @@index([sku])
  @@index([featured])
}

model ProductVariant {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[] @relation("VariantOrderItems")
  cartItems   CartItem[] @relation("VariantCartItems")
  sku         String?   @unique
  name        String    // e.g., "Small", "Red", "Cotton"
  type        String    // e.g., "size", "color", "material"
  price       Decimal?  @db.Decimal(10, 2) // Optional price override
  stock       Int       @default(0)
  image       String?   // Optional variant-specific image
  specs       Json?     // Additional variant-specific specs
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
  @@index([sku])
}

model Review {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating      Int       // 1-5 stars
  title       String    @db.VarChar(255)
  content     String    @db.Text
  images      String[]  // Array of image URLs
  isVerified  Boolean   @default(false) // Whether the user purchased the product
  helpful     Int       @default(0) // Number of users who found this review helpful
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  helpfulUsers ReviewHelpful[]

  @@index([productId])
  @@index([userId])
  @@index([rating])
}

model ReviewHelpful {
  id        String   @id @default(cuid())
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([reviewId, userId])
  @@index([reviewId])
  @@index([userId])
}

model ProductRelation {
  id          String    @id @default(cuid())
  fromProductId String
  fromProduct  Product   @relation("RelatedFrom", fields: [fromProductId], references: [id], onDelete: Cascade)
  toProductId  String
  toProduct    Product   @relation("RelatedTo", fields: [toProductId], references: [id], onDelete: Cascade)
  type        String    // e.g., "similar", "complementary", "upgrade"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([fromProductId, toProductId])
  @@index([fromProductId])
  @@index([toProductId])
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  user          User?       @relation(fields: [userId], references: [id])
  userId        String?     // <-- Now optional for guest orders
  items         OrderItem[]
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  shippingAddress Address?
  billingAddress BillingAddress? @relation("BillingAddress")
  stripeSessionId String?   @unique // Added for Stripe session tracking
  customerEmail   String?         // Added for storing customer email
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  variant     ProductVariant? @relation("VariantOrderItems", fields: [variantId], references: [id])
  variantId   String?
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model Address {
  id            String   @id @default(cuid())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String   @unique
  street        String
  city          String
  state         String
  postalCode    String
  country       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BillingAddress {
  id        String   @id @default(cuid())
  name      String
  email     String
  address   String
  city      String
  state     String
  zipCode   String
  country   String?
  phone     String?
  orderId   String   @unique
  order     Order    @relation("BillingAddress", fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime?

  @@index([orderId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant? @relation("VariantCartItems", fields: [variantId], references: [id])
  variantId String?
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
